# on:
#   pull_request:
#     types: [ closed ]
on:
  pull_request:
    branches: [ "main" ]

jobs:
  # call-resusable:
  #   uses: arpithasheshadri/webapp/.github/workflows/integration-test.yml@main
  build-and-deploy:
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Zip application code
      run: |
        # Change directory to the root of the repository
        cd .

        # Zip the entire repository
        zip -r webapp.zip .

    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0.4.0'
      with: 
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Install Packer
      run: |
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            sudo apt-get update && sudo apt-get install packer

    - name: Initiate Packer template
      run: packer init .

    - name: Validate Packer template
      run: packer validate -var-file="variables.pkrvars.hcl" .

    # - name: Build Packer template
    #   run: packer build -var-file="variables.pkrvars.hcl" .

    - name: Get Latest Image from GCP Console
      id: get_image
      run: |
        echo "instance_template_name=$(gcloud compute instance-templates list  --project cloud-gcp-tf --filter='name:instance-template-*' --sort-by="~creationTimestamp" --limit=1 --format="value(name)")" >> $GITHUB_OUTPUT
        echo "image_name=$(gcloud compute images list --project cloud-gcp-tf --filter='name:centos-stream-8-*' --sort-by=~creationTimestamp --limit=1 --format='value(name)')" >> $GITHUB_OUTPUT
    
    - name: Increment version for Instance Template Name
      id: NEW_INSTANCE_TEMPLATE
      env:
        ORIGINAL_STRING: ${{ steps.get_image.outputs.instance_template_name }}
      run: |
            #!/bin/bash
            original_string="${ORIGINAL_STRING}"
            regex="^(.*?)([0-9]+)$"
            
            if [[ $original_string =~ $regex ]]; then
                prefix="${BASH_REMATCH[1]}"
                number="${BASH_REMATCH[2]}"
                new_instance_template_name=$((number + 1))
                new_string="${prefix}${new_instance_template_name}"
                echo "New string: $new_string"
                echo "new_instance_template_name=$new_string" >> $GITHUB_OUTPUT
            else
                echo "The string does not end with a number."
            fi

    - name: get cloud sql instance name
      id: instance_name
      run: |
        echo "instance_name=$(gcloud sql instances list --filter="name:db-instance-*" --sort-by="creationTimestamp" --format="value(name)" --limit=1) " >> $GITHUB_OUTPUT
    
    - name: get CloudSQL IP
      id: fetch_db_hostname
      run: |
            database_hostname=$(gcloud sql instances describe ${{ steps.instance_name.outputs.instance_name }} --format='get(ipAddresses[0].ipAddress)' --project=cloud-gcp-tf)
            echo "::set-output name=database_hostname::$database_hostname"
    
    - name: Get secrets from GCP secret manager
      id: secrets
      uses: 'google-github-actions/get-secretmanager-secrets@v2'
      with:
        secrets: |-
            token:cloud-gcp-tf/webapp_secret
    
    - name: get kms keyrings
      id: kms_keyrings
      run: |
        echo "kms_keyrings=$(gcloud kms keyrings list --location=us-east1 --filter="name:cloud-key-ring-*" --sort-by="creationTimestamp" --format="value(name)" --limit=1)" >> $GITHUB_OUTPUT
          
    - name: get kms vm key
      id: kms_vm_key
      run: |
        echo "kms_vm_key=\$(gcloud kms keys list (--keyring=${{ steps.kms_keyrings.outputs.kms_keyrings }} : --location=us-east1) â€”-filter='name:crypto-key-vms-*' --sort-by='creationTimestamp' --format='value(name)' --limit=1) " >> $GITHUB_OUTPUT  
      

    - name: Create Instance Template
      run: |
        echo ${{ steps.secrets.outputs.token }}
        gcloud compute instance-templates create ${{ steps.NEW_INSTANCE_TEMPLATE.outputs.new_instance_template_name }} \
        --instance-template-region=us-east1 \
        --project=cloud-gcp-tf \
        --machine-type=e2-medium \
        --network-interface=network-tier=PREMIUM,stack-type=IPV4_ONLY,subnet=https://www.googleapis.com/compute/v1/projects/cloud-gcp-tf/regions/us-east1/subnetworks/webapp \
        --metadata=startup-script="#!/bin/bash
        echo \"SERVER_PORT=${{ secrets.NODE_APP_PORT }}\" > /opt/webapp/development.env
        echo \"DATABASE=${{ secrets.DB_NAME_USER }}\" >> /opt/webapp/development.env
        echo \"DATABASE_SYS=${{ secrets.POSTGRES_DB_DIALECT }}\" >> /opt/webapp/development.env
        echo \"PORT=${{ secrets.POSTGRES_DB_PORT }}\" >> /opt/webapp/development.env
        echo \"HOST=${{ steps.fetch_db_hostname.outputs.database_hostname  }}\" >> /opt/webapp/development.env
        echo \"PASSWORD=${{ steps.secrets.outputs.token }}\" >> /opt/webapp/development.env
        echo \"USER=${{ secrets.DB_NAME_USER }}\" >> /opt/webapp/development.env
        echo \"APP_ENV=prod\" >> /opt/webapp/development.env" \
        --service-account=webapp-account@cloud-gcp-tf.iam.gserviceaccount.com \
        --scopes=https://www.googleapis.com/auth/cloud-platform \
        --create-disk=auto-delete=yes,boot=yes,device-name=disk-1,image=projects/cloud-gcp-tf/global/images/${{ steps.get_image.outputs.image_name }},kms-key=projects/cloud-gcp-tf/locations/us-east1/keyRings/${{ steps.kms_keyrings.outputs.kms_keyrings }}/cryptoKeys/${{ steps.kms_vm_key.outputs.kms_vm_key}},mode=rw,size=50,type=pd-balanced \
        --tags=http-server 
      env:
          TOKEN: '${{ steps.secrets.outputs.token }}'

    - name: Configure Instance Groups
      run: |
        gcloud compute instance-groups managed rolling-action start-update webapp-group-manager \
        --version=template=https://compute.googleapis.com/compute/v1/projects/cloud-gcp-tf/regions/us-east1/instanceTemplates/${{ steps.NEW_INSTANCE_TEMPLATE.outputs.new_instance_template_name }} \
        --max-surge=3 \
        --max-unavailable=3 \
        --region=us-east1
        
    - name: Monitoring the instances
      run: |
        gcloud compute instance-groups managed wait-until webapp-group-manager \
        --version-target-reached \
        --region=us-east1

    